use indexmap::IndexMap;
use once_cell::sync::Lazy;

use crate::util::iso_key::IsoKey;

pub static MACOS_KEYS: Lazy<IndexMap<IsoKey, usize>> = Lazy::new(|| {
    let mut map = IndexMap::new();

    {
        let arr = [
            (IsoKey::E00, 10),
            (IsoKey::E01, 18),
            (IsoKey::E02, 19),
            (IsoKey::E03, 20),
            (IsoKey::E04, 21),
            (IsoKey::E05, 23),
            (IsoKey::E06, 22),
            (IsoKey::E07, 26),
            (IsoKey::E08, 28),
            (IsoKey::E09, 25),
            (IsoKey::E10, 29),
            (IsoKey::E11, 27),
            (IsoKey::E12, 24),
            (IsoKey::D01, 12),
            (IsoKey::D02, 13),
            (IsoKey::D03, 14),
            (IsoKey::D04, 15),
            (IsoKey::D05, 17),
            (IsoKey::D06, 16),
            (IsoKey::D07, 32),
            (IsoKey::D08, 34),
            (IsoKey::D09, 31),
            (IsoKey::D10, 35),
            (IsoKey::D11, 33),
            (IsoKey::D12, 30),
            (IsoKey::C01, 0),
            (IsoKey::C02, 1),
            (IsoKey::C03, 2),
            (IsoKey::C04, 3),
            (IsoKey::C05, 5),
            (IsoKey::C06, 4),
            (IsoKey::C07, 38),
            (IsoKey::C08, 40),
            (IsoKey::C09, 37),
            (IsoKey::C10, 41),
            (IsoKey::C11, 39),
            (IsoKey::C12, 42),
            (IsoKey::B00, 50),
            (IsoKey::B01, 6),
            (IsoKey::B02, 7),
            (IsoKey::B03, 8),
            (IsoKey::B04, 9),
            (IsoKey::B05, 11),
            (IsoKey::B06, 45),
            (IsoKey::B07, 46),
            (IsoKey::B08, 43),
            (IsoKey::B09, 47),
            (IsoKey::B10, 44),
        ];

        for (key, value) in arr {
            map.insert(key, value);
        }
    }

    map
});

pub const MACOS_HARDCODED: &[(usize, &str)] = &[
    (36, r"\u{D}"),
    (48, r"\u{9}"),
    (51, r"\u{8}"),
    (53, r"\u{1B}"),
    (64, r"\u{10}"),
    (66, r"\u{1D}"),
    (70, r"\u{1C}"),
    (71, r"\u{1B}"),
    (72, r"\u{1F}"),
    (76, r"\u{3}"),
    (77, r"\u{1E}"),
    (79, r"\u{10}"),
    (80, r"\u{10}"),
    (96, r"\u{10}"),
    (97, r"\u{10}"),
    (98, r"\u{10}"),
    (99, r"\u{10}"),
    (100, r"\u{10}"),
    (101, r"\u{10}"),
    (103, r"\u{10}"),
    (105, r"\u{10}"),
    (106, r"\u{10}"),
    (107, r"\u{10}"),
    (109, r"\u{10}"),
    (111, r"\u{10}"),
    (113, r"\u{10}"),
    (114, r"\u{5}"),
    (115, r"\u{1}"),
    (116, r"\u{B}"),
    (117, r"\u{7F}"),
    (118, r"\u{10}"),
    (119, r"\u{4}"),
    (120, r"\u{10}"),
    (121, r"\u{C}"),
    (122, r"\u{10}"),
    (123, r"\u{1C}"),
    (124, r"\u{1D}"),
    (125, r"\u{1F}"),
    (126, r"\u{1E}"),
    // Keypad codes
    (67, "*"),
    (69, "+"),
    (75, "/"),
    (78, "-"),
    (81, "="),
    (82, "0"),
    (83, "1"),
    (84, "2"),
    (85, "3"),
    (86, "4"),
    (87, "5"),
    (88, "6"),
    (89, "7"),
    (91, "8"),
    (92, "9"),
];
